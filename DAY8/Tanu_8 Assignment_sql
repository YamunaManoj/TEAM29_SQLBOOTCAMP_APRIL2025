1.Create View and Test Behaviour update


-- View for updatable products
CREATE VIEW vw_updatable_products AS
SELECT 
    product_id,
    product_name,
    unit_price,
    units_in_stock
FROM products;

-- Attempt to update prices via the view
UPDATE vw_updatable_products
SET unit_price = unit_price * 1.1
WHERE units_in_stock < 10;

-- Check view after update
SELECT *
FROM vw_updatable_products
WHERE units_in_stock < 10
ORDER BY unit_price;

-- Check original table to see if update reflected
SELECT 
    product_id, 
    product_name,
    unit_price,
    units_in_stock
FROM products
WHERE units_in_stock < 10
ORDER BY unit_price;

-- To drop the view later if needed
-- DROP VIEW vw_updatable_products;



2. Transaction with ROLLBACK and COMMIT
-- Check original values before update
SELECT *
FROM products
WHERE category_id = 1
ORDER BY unit_price;

-- Begin transaction and update
BEGIN;

UPDATE products
SET unit_price = unit_price * 1.10
WHERE category_id = 1;

-- Check updated values (not committed yet)
SELECT *
FROM products
WHERE category_id = 1
ORDER BY unit_price;

-- Rollback to undo changes
ROLLBACK;

-- Check if rollback worked
SELECT *
FROM products
WHERE category_id = 1
ORDER BY unit_price;

-- Try again if you want to commit instead
-- BEGIN;
-- UPDATE products SET unit_price = unit_price * 1.10 WHERE category_id = 1;
-- COMMIT;
3. Join-based View for Employee Details

-- Create view to show employee and region details
CREATE VIEW vw_employee_details AS
SELECT 
    e.employee_id,
    CONCAT(e.first_name, ' ', e.last_name) AS employee_full_name,
    e.title,
    t.territory_id,
    t.territory_description,
    r.region_description
FROM employees e
JOIN employee_territories et ON e.employee_id = et.employee_id
JOIN territories t ON et.territory_id = t.territory_id
JOIN region r ON t.region_id = r.region_id;

-- View the data
SELECT *
FROM vw_employee_details;

-- To drop later:
-- DROP VIEW vw_employee_details;

4. Recursive CTE for Employee Hierarchy

-- Recursive CTE to get hierarchical employee structure
WITH RECURSIVE cte_employee_hierarchy AS (
    SELECT 
        employee_id,
        first_name,
        last_name,
        reports_to,
        0 AS level
    FROM employees
    WHERE reports_to IS NULL

    UNION ALL

    SELECT 
        e.employee_id,
        e.first_name,
        e.last_name,
        e.reports_to,
        ch.level + 1
    FROM employees e
    INNER JOIN cte_employee_hierarchy ch ON ch.employee_id = e.reports_to
)

-- Display results
SELECT 
    level,
    employee_id,
    CONCAT(first_name, ' ', last_name) AS employee_name
FROM cte_employee_hierarchy
ORDER BY level, employee_id;

